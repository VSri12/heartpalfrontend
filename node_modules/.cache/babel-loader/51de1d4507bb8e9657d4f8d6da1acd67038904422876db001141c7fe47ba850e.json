{"ast":null,"code":"var _jsxFileName = \"/Applications/U CS/Y-3/S-2/Term Paper/Term_Paper_Application/frontend/src/doctor/CurrentHeartRate.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport config from '../config';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function CurrentHeartRate() {\n  _s();\n  const [heartRate, setHeartRate] = useState(null);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const fetchHeartRate = async () => {\n      try {\n        const response = await axios.post(`${config.url}/current_heart_rate`);\n        console.log('API Response:', response.data); // Log the entire response to inspect it\n\n        // Ensure that the structure of the response is correct\n        if (response.data && response.data.feeds && response.data.feeds[0] && response.data.feeds[0].field1) {\n          const heartRateValue = response.data.feeds[0].field1;\n          console.log('Heart Rate:', heartRateValue); // Log the heart rate value to verify\n\n          setHeartRate(heartRateValue); // Store the value in state\n        } else {\n          setError('No heart rate data found.');\n        }\n      } catch (err) {\n        setError('Failed to fetch current heart rate');\n        console.error('Error fetching heart rate:', err);\n      }\n    };\n\n    // Initial fetch\n    fetchHeartRate();\n\n    // Set up an interval to refresh data every 5 seconds\n    const intervalId = setInterval(fetchHeartRate, 5000);\n\n    // Cleanup function to clear the interval when the component is unmounted\n    return () => clearInterval(intervalId);\n  }, []); // Empty dependency array ensures the effect runs only once on mount\n\n  console.log('Current Heart Rate:', heartRate); // Log heart rate state to track changes\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: error ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }, this) // Show error message if there's an issue fetching the data\n    : heartRate !== null ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Current Heart Rate: \", heartRate, \" BPM\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }, this) // Show the current heart rate if it's available\n    : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }, this) // Show loading message while waiting for data\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n}\n_s(CurrentHeartRate, \"efJWtdJ7qnga1HdsNaqyJXXW+TQ=\");\n_c = CurrentHeartRate;\nvar _c;\n$RefreshReg$(_c, \"CurrentHeartRate\");","map":{"version":3,"names":["React","useState","useEffect","axios","config","jsxDEV","_jsxDEV","CurrentHeartRate","_s","heartRate","setHeartRate","error","setError","fetchHeartRate","response","post","url","console","log","data","feeds","field1","heartRateValue","err","intervalId","setInterval","clearInterval","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Applications/U CS/Y-3/S-2/Term Paper/Term_Paper_Application/frontend/src/doctor/CurrentHeartRate.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport config from '../config';\n\nexport default function CurrentHeartRate() {\n  const [heartRate, setHeartRate] = useState(null);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const fetchHeartRate = async () => {\n      try {\n        const response = await axios.post(`${config.url}/current_heart_rate`);\n        console.log('API Response:', response.data);  // Log the entire response to inspect it\n\n        // Ensure that the structure of the response is correct\n        if (response.data && response.data.feeds && response.data.feeds[0] && response.data.feeds[0].field1) {\n          const heartRateValue = response.data.feeds[0].field1;\n          console.log('Heart Rate:', heartRateValue);  // Log the heart rate value to verify\n\n          setHeartRate(heartRateValue);  // Store the value in state\n        } else {\n          setError('No heart rate data found.');\n        }\n      } catch (err) {\n        setError('Failed to fetch current heart rate');\n        console.error('Error fetching heart rate:', err);\n      }\n    };\n\n    // Initial fetch\n    fetchHeartRate();\n\n    // Set up an interval to refresh data every 5 seconds\n    const intervalId = setInterval(fetchHeartRate, 5000);\n\n    // Cleanup function to clear the interval when the component is unmounted\n    return () => clearInterval(intervalId);\n  }, []); // Empty dependency array ensures the effect runs only once on mount\n\n  console.log('Current Heart Rate:', heartRate);  // Log heart rate state to track changes\n\n  return (\n    <div>\n      {error ? (\n        <p>{error}</p>  // Show error message if there's an issue fetching the data\n      ) : heartRate !== null ? (\n        <p>Current Heart Rate: {heartRate} BPM</p>  // Show the current heart rate if it's available\n      ) : (\n        <p>Loading...</p>  // Show loading message while waiting for data\n      )}\n    </div>\n  );\n}\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,MAAM,MAAM,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/B,eAAe,SAASC,gBAAgBA,CAAA,EAAG;EAAAC,EAAA;EACzC,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAM,CAACU,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EAExCC,SAAS,CAAC,MAAM;IACd,MAAMW,cAAc,GAAG,MAAAA,CAAA,KAAY;MACjC,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMX,KAAK,CAACY,IAAI,CAAC,GAAGX,MAAM,CAACY,GAAG,qBAAqB,CAAC;QACrEC,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEJ,QAAQ,CAACK,IAAI,CAAC,CAAC,CAAE;;QAE9C;QACA,IAAIL,QAAQ,CAACK,IAAI,IAAIL,QAAQ,CAACK,IAAI,CAACC,KAAK,IAAIN,QAAQ,CAACK,IAAI,CAACC,KAAK,CAAC,CAAC,CAAC,IAAIN,QAAQ,CAACK,IAAI,CAACC,KAAK,CAAC,CAAC,CAAC,CAACC,MAAM,EAAE;UACnG,MAAMC,cAAc,GAAGR,QAAQ,CAACK,IAAI,CAACC,KAAK,CAAC,CAAC,CAAC,CAACC,MAAM;UACpDJ,OAAO,CAACC,GAAG,CAAC,aAAa,EAAEI,cAAc,CAAC,CAAC,CAAE;;UAE7CZ,YAAY,CAACY,cAAc,CAAC,CAAC,CAAE;QACjC,CAAC,MAAM;UACLV,QAAQ,CAAC,2BAA2B,CAAC;QACvC;MACF,CAAC,CAAC,OAAOW,GAAG,EAAE;QACZX,QAAQ,CAAC,oCAAoC,CAAC;QAC9CK,OAAO,CAACN,KAAK,CAAC,4BAA4B,EAAEY,GAAG,CAAC;MAClD;IACF,CAAC;;IAED;IACAV,cAAc,CAAC,CAAC;;IAEhB;IACA,MAAMW,UAAU,GAAGC,WAAW,CAACZ,cAAc,EAAE,IAAI,CAAC;;IAEpD;IACA,OAAO,MAAMa,aAAa,CAACF,UAAU,CAAC;EACxC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAERP,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAET,SAAS,CAAC,CAAC,CAAE;;EAEhD,oBACEH,OAAA;IAAAqB,QAAA,EACGhB,KAAK,gBACJL,OAAA;MAAAqB,QAAA,EAAIhB;IAAK;MAAAiB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,CAAE;IAAA,EACdtB,SAAS,KAAK,IAAI,gBACpBH,OAAA;MAAAqB,QAAA,GAAG,sBAAoB,EAAClB,SAAS,EAAC,MAAI;IAAA;MAAAmB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,CAAE;IAAA,eAE5CzB,OAAA;MAAAqB,QAAA,EAAG;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,CAAE;EACpB;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV;AAACvB,EAAA,CAhDuBD,gBAAgB;AAAAyB,EAAA,GAAhBzB,gBAAgB;AAAA,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}