{"ast":null,"code":"var _jsxFileName = \"/Applications/U CS/Y-3/S-2/Term Paper/Term_Paper_Application/frontend/src/doctor/Predictions.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport config from '../config';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Prediction() {\n  _s();\n  const [prediction, setPrediction] = useState(null);\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const fetchAnalysis = async () => {\n    setLoading(true);\n    try {\n      const response = await axios.post(`${config.url}/palpitation_analysis`, {\n        // You can include any payload here if your backend expects it\n        // For now we send an empty JSON if the backend reads directly from ThingSpeak\n      }, {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      console.log('Prediction Response:', response.data);\n      setPrediction(response.data.prediction); // Assuming response looks like { prediction: \"Low\" }\n      setError(null);\n    } catch (err) {\n      console.error('Error fetching prediction:', err);\n      setError('Could not fetch prediction');\n      setPrediction(null);\n    } finally {\n      setLoading(false);\n    }\n  };\n  useEffect(() => {\n    fetchAnalysis();\n    const intervalId = setInterval(fetchAnalysis, 10000); // refresh every 10s\n    return () => clearInterval(intervalId);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: '20px',\n      textAlign: 'center'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Palpitation Risk Prediction\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }, this) : error ? /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: 'red'\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }, this) : prediction ? /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        fontSize: '1.5rem',\n        fontWeight: 'bold',\n        color: prediction === 'High' ? 'red' : prediction === 'Moderate' ? 'orange' : 'green'\n      },\n      children: [\"Risk Level: \", prediction]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No prediction available\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n}\n_s(Prediction, \"TjD2ZGHcoUuO8BWqhjvj6SunfiE=\");\n_c = Prediction;\nvar _c;\n$RefreshReg$(_c, \"Prediction\");","map":{"version":3,"names":["React","useState","useEffect","axios","config","jsxDEV","_jsxDEV","Prediction","_s","prediction","setPrediction","error","setError","loading","setLoading","fetchAnalysis","response","post","url","headers","console","log","data","err","intervalId","setInterval","clearInterval","style","padding","textAlign","children","fileName","_jsxFileName","lineNumber","columnNumber","color","fontSize","fontWeight","_c","$RefreshReg$"],"sources":["/Applications/U CS/Y-3/S-2/Term Paper/Term_Paper_Application/frontend/src/doctor/Predictions.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport config from '../config';\n\nexport default function Prediction() {\n  const [prediction, setPrediction] = useState(null);\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(false);\n\n  const fetchAnalysis = async () => {\n    setLoading(true);\n    try {\n      const response = await axios.post(\n        `${config.url}/palpitation_analysis`,\n        {\n          // You can include any payload here if your backend expects it\n          // For now we send an empty JSON if the backend reads directly from ThingSpeak\n        },\n        {\n          headers: {\n            'Content-Type': 'application/json',\n          },\n        }\n      );\n\n      console.log('Prediction Response:', response.data);\n      setPrediction(response.data.prediction); // Assuming response looks like { prediction: \"Low\" }\n      setError(null);\n    } catch (err) {\n      console.error('Error fetching prediction:', err);\n      setError('Could not fetch prediction');\n      setPrediction(null);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchAnalysis();\n    const intervalId = setInterval(fetchAnalysis, 10000); // refresh every 10s\n    return () => clearInterval(intervalId);\n  }, []);\n\n  return (\n    <div style={{ padding: '20px', textAlign: 'center' }}>\n      <h2>Palpitation Risk Prediction</h2>\n      {loading ? (\n        <p>Loading...</p>\n      ) : error ? (\n        <p style={{ color: 'red' }}>{error}</p>\n      ) : prediction ? (\n        <p style={{\n          fontSize: '1.5rem',\n          fontWeight: 'bold',\n          color:\n            prediction === 'High' ? 'red' :\n            prediction === 'Moderate' ? 'orange' :\n            'green'\n        }}>\n          Risk Level: {prediction}\n        </p>\n      ) : (\n        <p>No prediction available</p>\n      )}\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}