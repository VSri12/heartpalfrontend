{"ast":null,"code":"var _jsxFileName = \"/Applications/U CS/Y-3/S-2/Term Paper/Term_Paper_Application/frontend/src/doctor/Predictions.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport config from '../config';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Prediction() {\n  _s();\n  const [prediction, setPrediction] = useState(null);\n  const [allLabels, setAllLabels] = useState([]);\n  const [graph, setGraph] = useState(null);\n  const [error, setError] = useState(null);\n  const fetchThingSpeakDataAndAnalyze = async () => {\n    try {\n      // Step 1: Get heart rate data from ThingSpeak\n      const response = await axios.get(`https://api.thingspeak.com/channels/2918241/feeds.json?results=30`);\n      const feeds = response.data.feeds;\n\n      // Step 2: Send feeds to your Flask backend for analysis\n      const analysisRes = await axios.post(`${config.url}/palpitation_analysis`, {\n        feeds\n      }, {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      const data = analysisRes.data;\n      setPrediction(data.latest_prediction);\n      setAllLabels(data.all_predictions);\n      setGraph(data.trend_graph);\n      setError(null);\n    } catch (err) {\n      console.error(err);\n      setError('Error fetching or analyzing data.');\n    }\n  };\n  useEffect(() => {\n    fetchThingSpeakDataAndAnalyze();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: '20px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Palpitation Risk Prediction\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), error ? /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: 'red'\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }, this) : prediction ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Latest Risk:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 14\n        }, this), \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            color: prediction === 'High' ? 'red' : prediction === 'Moderate' ? 'orange' : 'green'\n          },\n          children: prediction\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 44\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 11\n      }, this), graph && /*#__PURE__*/_jsxDEV(\"img\", {\n        src: `data:image/png;base64,${graph}`,\n        alt: \"Heart Rate Trend\",\n        style: {\n          maxWidth: '100%',\n          marginTop: '20px'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Past Predictions:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: allLabels.map((label, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: label\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading analysis...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n}\n_s(Prediction, \"ETN/Bxp9E9s/wGDw6LF+naV5JFA=\");\n_c = Prediction;\nvar _c;\n$RefreshReg$(_c, \"Prediction\");","map":{"version":3,"names":["React","useEffect","useState","axios","config","jsxDEV","_jsxDEV","Fragment","_Fragment","Prediction","_s","prediction","setPrediction","allLabels","setAllLabels","graph","setGraph","error","setError","fetchThingSpeakDataAndAnalyze","response","get","feeds","data","analysisRes","post","url","headers","latest_prediction","all_predictions","trend_graph","err","console","style","padding","children","fileName","_jsxFileName","lineNumber","columnNumber","color","src","alt","maxWidth","marginTop","map","label","index","_c","$RefreshReg$"],"sources":["/Applications/U CS/Y-3/S-2/Term Paper/Term_Paper_Application/frontend/src/doctor/Predictions.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport config from '../config';\n\nexport default function Prediction() {\n  const [prediction, setPrediction] = useState(null);\n  const [allLabels, setAllLabels] = useState([]);\n  const [graph, setGraph] = useState(null);\n  const [error, setError] = useState(null);\n\n  const fetchThingSpeakDataAndAnalyze = async () => {\n    try {\n      // Step 1: Get heart rate data from ThingSpeak\n      const response = await axios.get(\n        `https://api.thingspeak.com/channels/2918241/feeds.json?results=30`\n      );\n\n      const feeds = response.data.feeds;\n\n      // Step 2: Send feeds to your Flask backend for analysis\n      const analysisRes = await axios.post(\n        `${config.url}/palpitation_analysis`,\n        { feeds },\n        {\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        }\n      );\n\n      const data = analysisRes.data;\n      setPrediction(data.latest_prediction);\n      setAllLabels(data.all_predictions);\n      setGraph(data.trend_graph);\n      setError(null);\n    } catch (err) {\n      console.error(err);\n      setError('Error fetching or analyzing data.');\n    }\n  };\n\n  useEffect(() => {\n    fetchThingSpeakDataAndAnalyze();\n  }, []);\n\n  return (\n    <div style={{ padding: '20px' }}>\n      <h2>Palpitation Risk Prediction</h2>\n      {error ? (\n        <p style={{ color: 'red' }}>{error}</p>\n      ) : prediction ? (\n        <>\n          <p><strong>Latest Risk:</strong> <span style={{\n            color: prediction === 'High' ? 'red' :\n                   prediction === 'Moderate' ? 'orange' : 'green'\n          }}>{prediction}</span></p>\n\n          {graph && (\n            <img\n              src={`data:image/png;base64,${graph}`}\n              alt=\"Heart Rate Trend\"\n              style={{ maxWidth: '100%', marginTop: '20px' }}\n            />\n          )}\n\n          <h4>Past Predictions:</h4>\n          <ul>\n            {allLabels.map((label, index) => (\n              <li key={index}>{label}</li>\n            ))}\n          </ul>\n        </>\n      ) : (\n        <p>Loading analysis...</p>\n      )}\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}