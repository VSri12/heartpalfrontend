{"ast":null,"code":"var _jsxFileName = \"/Applications/U CS/Y-3/S-2/Term Paper/Term_Paper_Application/frontend/src/doctor/Predictions.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport config from './config'; // Import the config file\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Predictions = () => {\n  _s();\n  const [prediction, setPrediction] = useState(null);\n  const [image, setImage] = useState(null);\n  const [allPredictions, setAllPredictions] = useState([]);\n  const [error, setError] = useState('');\n\n  // Function to fetch ThingSpeak data and send it to the backend for analysis\n  const fetchThingSpeakDataAndAnalyze = async () => {\n    try {\n      // Step 1: Fetch heart rate data from ThingSpeak\n      const thingSpeakRes = await axios.get('https://api.thingspeak.com/channels/2918241/feeds.json?results=20');\n      const thingSpeakData = thingSpeakRes.data;\n      console.log(\"Fetched ThingSpeak Data:\", thingSpeakData);\n      if (!thingSpeakData.feeds || thingSpeakData.feeds.length === 0) {\n        throw new Error('No heart rate data in feeds.');\n      }\n\n      // Step 2: Send ThingSpeak data to the backend for analysis using config.url\n      const backendRes = await axios.post(`${config.url}/palpitation_analysis`, thingSpeakData, {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      const {\n        trend_graph,\n        latest_prediction,\n        all_predictions\n      } = backendRes.data;\n\n      // Step 3: Update state with the results\n      setPrediction(latest_prediction);\n      setAllPredictions(all_predictions);\n      setImage(`data:image/png;base64,${trend_graph}`);\n      setError('');\n    } catch (err) {\n      console.error('Error fetching or analyzing data:', err);\n      setError('Unable to analyze heart rate data.');\n    }\n  };\n\n  // Fetch data and analyze when the component mounts\n  useEffect(() => {\n    fetchThingSpeakDataAndAnalyze();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p-4\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"text-xl font-bold mb-2\",\n      children: \"Heart Rate Prediction\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-red-500\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 17\n    }, this), prediction && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-lg\",\n      children: [\"Latest Prediction: \", /*#__PURE__*/_jsxDEV(\"strong\", {\n        children: prediction\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 64\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 22\n    }, this), image && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"mt-4 font-semibold\",\n        children: \"Trend Graph\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: image,\n        alt: \"Heart Rate Trend\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }, this), allPredictions.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"mt-4 font-semibold\",\n        children: \"All Predictions\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"list-disc ml-6\",\n        children: allPredictions.map((pred, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: pred\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n};\n_s(Predictions, \"HBfKI10RgZPjXqGTFahtRmiM2OU=\");\n_c = Predictions;\nexport default Predictions;\nvar _c;\n$RefreshReg$(_c, \"Predictions\");","map":{"version":3,"names":["React","useEffect","useState","axios","config","jsxDEV","_jsxDEV","Predictions","_s","prediction","setPrediction","image","setImage","allPredictions","setAllPredictions","error","setError","fetchThingSpeakDataAndAnalyze","thingSpeakRes","get","thingSpeakData","data","console","log","feeds","length","Error","backendRes","post","url","headers","trend_graph","latest_prediction","all_predictions","err","className","children","fileName","_jsxFileName","lineNumber","columnNumber","src","alt","map","pred","index","_c","$RefreshReg$"],"sources":["/Applications/U CS/Y-3/S-2/Term Paper/Term_Paper_Application/frontend/src/doctor/Predictions.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport config from './config';  // Import the config file\n\nconst Predictions = () => {\n  const [prediction, setPrediction] = useState(null);\n  const [image, setImage] = useState(null);\n  const [allPredictions, setAllPredictions] = useState([]);\n  const [error, setError] = useState('');\n\n  // Function to fetch ThingSpeak data and send it to the backend for analysis\n  const fetchThingSpeakDataAndAnalyze = async () => {\n    try {\n      // Step 1: Fetch heart rate data from ThingSpeak\n      const thingSpeakRes = await axios.get(\n        'https://api.thingspeak.com/channels/2918241/feeds.json?results=20'\n      );\n\n      const thingSpeakData = thingSpeakRes.data;\n      console.log(\"Fetched ThingSpeak Data:\", thingSpeakData);\n\n      if (!thingSpeakData.feeds || thingSpeakData.feeds.length === 0) {\n        throw new Error('No heart rate data in feeds.');\n      }\n\n      // Step 2: Send ThingSpeak data to the backend for analysis using config.url\n      const backendRes = await axios.post(`${config.url}/palpitation_analysis`, thingSpeakData, {\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n\n      const { trend_graph, latest_prediction, all_predictions } = backendRes.data;\n\n      // Step 3: Update state with the results\n      setPrediction(latest_prediction);\n      setAllPredictions(all_predictions);\n      setImage(`data:image/png;base64,${trend_graph}`);\n      setError('');\n    } catch (err) {\n      console.error('Error fetching or analyzing data:', err);\n      setError('Unable to analyze heart rate data.');\n    }\n  };\n\n  // Fetch data and analyze when the component mounts\n  useEffect(() => {\n    fetchThingSpeakDataAndAnalyze();\n  }, []);\n\n  return (\n    <div className=\"p-4\">\n      <h1 className=\"text-xl font-bold mb-2\">Heart Rate Prediction</h1>\n\n      {/* Display error if there is one */}\n      {error && <p className=\"text-red-500\">{error}</p>}\n\n      {/* Display latest prediction */}\n      {prediction && <p className=\"text-lg\">Latest Prediction: <strong>{prediction}</strong></p>}\n\n      {/* Display heart rate trend graph */}\n      {image && (\n        <div>\n          <h2 className=\"mt-4 font-semibold\">Trend Graph</h2>\n          <img src={image} alt=\"Heart Rate Trend\" />\n        </div>\n      )}\n\n      {/* Display all predictions */}\n      {allPredictions.length > 0 && (\n        <div>\n          <h2 className=\"mt-4 font-semibold\">All Predictions</h2>\n          <ul className=\"list-disc ml-6\">\n            {allPredictions.map((pred, index) => (\n              <li key={index}>{pred}</li>\n            ))}\n          </ul>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Predictions;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}