{"ast":null,"code":"var _jsxFileName = \"/Applications/U CS/Y-3/S-2/Term Paper/Term_Paper_Application/frontend/src/doctor/Predictions.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport config from '../config';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Prediction = () => {\n  _s();\n  const [plotUrl, setPlotUrl] = useState('');\n  const [predictedHeartRate, setPredictedHeartRate] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  // Fetch heart rate plot\n  const fetchHeartRatePlot = async () => {\n    try {\n      const response = await axios.get(`${config.url}/plot_heart_rate`);\n      if (response.data && response.data.image) {\n        setPlotUrl(`data:image/png;base64,${response.data.image}`);\n      }\n    } catch (error) {\n      console.error('Error fetching heart rate plot:', error);\n    }\n  };\n\n  // Fetch heart rate prediction\n  const fetchPrediction = async () => {\n    try {\n      const response = await axios.get(`${config.API_BAS}/predict_heart_rate`);\n      if (response.data && response.data.predicted_heart_rate !== undefined) {\n        setPredictedHeartRate(response.data.predicted_heart_rate);\n      }\n    } catch (error) {\n      console.error('Error fetching heart rate prediction:', error);\n    }\n  };\n\n  // Use useEffect to call both functions when the component mounts\n  useEffect(() => {\n    const fetchData = async () => {\n      await Promise.all([fetchHeartRatePlot(), fetchPrediction()]);\n      setLoading(false); // Set loading to false after both are fetched\n    };\n    fetchData();\n  }, []);\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      textAlign: 'center'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Heart Rate Prediction\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), plotUrl ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Heart Rate Plot\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: plotUrl,\n        alt: \"Heart Rate Plot\",\n        style: {\n          maxWidth: '100%',\n          height: 'auto'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Failed to load plot.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }, this), predictedHeartRate !== null ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Predicted Next Heart Rate: \", predictedHeartRate.toFixed(2), \" BPM\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Failed to load prediction.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n};\n_s(Prediction, \"orl0eiJVU4q6SCKLXIQbPLe53Mk=\");\n_c = Prediction;\nexport default Prediction;\nvar _c;\n$RefreshReg$(_c, \"Prediction\");","map":{"version":3,"names":["React","useState","useEffect","axios","config","jsxDEV","_jsxDEV","Prediction","_s","plotUrl","setPlotUrl","predictedHeartRate","setPredictedHeartRate","loading","setLoading","fetchHeartRatePlot","response","get","url","data","image","error","console","fetchPrediction","API_BAS","predicted_heart_rate","undefined","fetchData","Promise","all","children","fileName","_jsxFileName","lineNumber","columnNumber","style","textAlign","src","alt","maxWidth","height","toFixed","_c","$RefreshReg$"],"sources":["/Applications/U CS/Y-3/S-2/Term Paper/Term_Paper_Application/frontend/src/doctor/Predictions.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport config from '../config';\n\nconst Prediction = () => {\n  const [plotUrl, setPlotUrl] = useState('');\n  const [predictedHeartRate, setPredictedHeartRate] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  // Fetch heart rate plot\n  const fetchHeartRatePlot = async () => {\n    try {\n      const response = await axios.get(`${config.url}/plot_heart_rate`);\n      if (response.data && response.data.image) {\n        setPlotUrl(`data:image/png;base64,${response.data.image}`);\n      }\n    } catch (error) {\n      console.error('Error fetching heart rate plot:', error);\n    }\n  };\n\n  // Fetch heart rate prediction\n  const fetchPrediction = async () => {\n    try {\n      const response = await axios.get(`${config.API_BAS}/predict_heart_rate`);\n      if (response.data && response.data.predicted_heart_rate !== undefined) {\n        setPredictedHeartRate(response.data.predicted_heart_rate);\n      }\n    } catch (error) {\n      console.error('Error fetching heart rate prediction:', error);\n    }\n  };\n\n  // Use useEffect to call both functions when the component mounts\n  useEffect(() => {\n    const fetchData = async () => {\n      await Promise.all([fetchHeartRatePlot(), fetchPrediction()]);\n      setLoading(false);  // Set loading to false after both are fetched\n    };\n    \n    fetchData();\n  }, []);\n\n  if (loading) {\n    return <div>Loading...</div>;\n  }\n\n  return (\n    <div style={{ textAlign: 'center' }}>\n      <h2>Heart Rate Prediction</h2>\n      \n      {plotUrl ? (\n        <div>\n          <h3>Heart Rate Plot</h3>\n          <img src={plotUrl} alt=\"Heart Rate Plot\" style={{ maxWidth: '100%', height: 'auto' }} />\n        </div>\n      ) : (\n        <p>Failed to load plot.</p>\n      )}\n\n      {predictedHeartRate !== null ? (\n        <div>\n          <h3>Predicted Next Heart Rate: {predictedHeartRate.toFixed(2)} BPM</h3>\n        </div>\n      ) : (\n        <p>Failed to load prediction.</p>\n      )}\n    </div>\n  );\n};\n\nexport default Prediction;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}