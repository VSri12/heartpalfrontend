{"ast":null,"code":"var _jsxFileName = \"/Applications/U CS/Y-3/S-2/Term Paper/Term_Paper_Application/frontend/src/doctor/Predictions.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport config from '../config';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Predictions = () => {\n  _s();\n  const [prediction, setPrediction] = useState(null);\n  const [image, setImage] = useState(null);\n  const [allPredictions, setAllPredictions] = useState([]);\n  const [error, setError] = useState('');\n  const [loading, setLoading] = useState(true);\n  const [retryCount, setRetryCount] = useState(0);\n  const fetchCSVDataAndAnalyze = async () => {\n    try {\n      setLoading(true);\n      const res = await axios.get(`${config.url}/palpitation_analysis_csv`);\n      const {\n        trend_graph,\n        latest_prediction,\n        all_predictions,\n        accuracy,\n        classification_report,\n        confusion_matrix\n      } = res.data;\n      setPrediction(latest_prediction);\n      setAllPredictions(all_predictions);\n      setImage(`data:image/png;base64,${trend_graph}`);\n      setError('');\n    } catch (err) {\n      console.error('Error analyzing CSV data:', err);\n      setError('Failed to analyze CSV heart rate data.');\n      if (retryCount < 3) {\n        setTimeout(() => setRetryCount(retryCount + 1), 2500);\n      }\n    } finally {\n      setLoading(false);\n    }\n  };\n  useEffect(() => {\n    // Timeout to simulate loading animation for 20 seconds\n    const timer = setTimeout(() => {\n      fetchCSVDataAndAnalyze();\n    }, 20000); // 20 seconds delay before fetching data\n\n    // Clean up the timer\n    return () => clearTimeout(timer);\n  }, [retryCount]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p-4\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"text-xl font-bold mb-2\",\n      children: \"Heart Rate Prediction (CSV)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-blue-500\",\n      children: \"Loading data... Please wait.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }, this) : error ? /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-red-500\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [prediction && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-lg\",\n        children: [\"Latest Prediction: \", /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: prediction\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 68\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 26\n      }, this), image && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"mt-4 font-semibold\",\n          children: \"Trend Graph\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          src: image,\n          alt: \"Heart Rate Trend\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 13\n      }, this), allPredictions && allPredictions.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"mt-4 font-semibold\",\n          children: \"All Predictions\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"list-disc ml-6\",\n          children: allPredictions.map((pred, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: pred\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 19\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n};\n_s(Predictions, \"9McjxFQUsaI0gnkZ4ilOgxlnSok=\");\n_c = Predictions;\nexport default Predictions;\nvar _c;\n$RefreshReg$(_c, \"Predictions\");","map":{"version":3,"names":["React","useEffect","useState","axios","config","jsxDEV","_jsxDEV","Fragment","_Fragment","Predictions","_s","prediction","setPrediction","image","setImage","allPredictions","setAllPredictions","error","setError","loading","setLoading","retryCount","setRetryCount","fetchCSVDataAndAnalyze","res","get","url","trend_graph","latest_prediction","all_predictions","accuracy","classification_report","confusion_matrix","data","err","console","setTimeout","timer","clearTimeout","className","children","fileName","_jsxFileName","lineNumber","columnNumber","src","alt","length","map","pred","index","_c","$RefreshReg$"],"sources":["/Applications/U CS/Y-3/S-2/Term Paper/Term_Paper_Application/frontend/src/doctor/Predictions.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport config from '../config';\n\nconst Predictions = () => {\n  const [prediction, setPrediction] = useState(null);\n  const [image, setImage] = useState(null);\n  const [allPredictions, setAllPredictions] = useState([]);\n  const [error, setError] = useState('');\n  const [loading, setLoading] = useState(true);\n  const [retryCount, setRetryCount] = useState(0);\n\n  const fetchCSVDataAndAnalyze = async () => {\n    try {\n      setLoading(true);\n      const res = await axios.get(`${config.url}/palpitation_analysis_csv`);\n      const {\n        trend_graph,\n        latest_prediction,\n        all_predictions,\n        accuracy,\n        classification_report,\n        confusion_matrix,\n      } = res.data;\n\n      setPrediction(latest_prediction);\n      setAllPredictions(all_predictions);\n      setImage(`data:image/png;base64,${trend_graph}`);\n      setError('');\n    } catch (err) {\n      console.error('Error analyzing CSV data:', err);\n      setError('Failed to analyze CSV heart rate data.');\n      if (retryCount < 3) {\n        setTimeout(() => setRetryCount(retryCount + 1), 2500);\n      }\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    // Timeout to simulate loading animation for 20 seconds\n    const timer = setTimeout(() => {\n      fetchCSVDataAndAnalyze();\n    }, 20000); // 20 seconds delay before fetching data\n\n    // Clean up the timer\n    return () => clearTimeout(timer);\n  }, [retryCount]);\n\n  return (\n    <div className=\"p-4\">\n      <h1 className=\"text-xl font-bold mb-2\">Heart Rate Prediction (CSV)</h1>\n\n      {loading ? (\n        <p className=\"text-blue-500\">Loading data... Please wait.</p>\n      ) : error ? (\n        <p className=\"text-red-500\">{error}</p>\n      ) : (\n        <>\n          {prediction && <p className=\"text-lg\">Latest Prediction: <strong>{prediction}</strong></p>}\n\n          {image && (\n            <div>\n              <h2 className=\"mt-4 font-semibold\">Trend Graph</h2>\n              <img src={image} alt=\"Heart Rate Trend\" />\n            </div>\n          )}\n\n          {allPredictions && allPredictions.length > 0 && (\n            <div>\n              <h2 className=\"mt-4 font-semibold\">All Predictions</h2>\n              <ul className=\"list-disc ml-6\">\n                {allPredictions.map((pred, index) => (\n                  <li key={index}>{pred}</li>\n                ))}\n              </ul>\n            </div>\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default Predictions;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}